{"version":3,"sources":["components/tasks/Footer.js","components/tasks/Header.js","components/tasks/List.js","components/tasks/Task.js","App.js","index.js","components/tasks/Task.module.css"],"names":["Footer","year","Date","getFullYear","Header","getDate","getMonth","List","props","useState","userInput","setUserInput","onSubmit","e","preventDefault","length","setList","prevState","id","uuidv4","title","trim","done","type","placeholder","value","onChange","target","Task","userTask","list","map","toDo","i","className","styles","opaci","defaultChecked","check","onClick","remove","App","itemToRemove","newArr","filter","item","itemToCheck","console","log","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"yKAKeA,EALA,WACb,IAAIC,GAAO,IAAIC,MAAOC,cACtB,OAAO,qDAAqBF,EAArB,QCaMG,EAfA,WACb,OACE,mCACE,6CACA,wCACM,IAAIF,MAAOG,UADjB,aAEI,IAAIH,MAAOI,WAAa,EAF5B,aAGM,IAAIJ,MAAOC,iBAEjB,oDACA,2B,eC6BSI,EArCF,SAACC,GAEZ,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAqBA,OACE,uBAAMC,SAfR,SAAwBC,GACtBA,EAAEC,iBAEEJ,EAAUK,SAEZP,EAAMQ,SAAQ,SAACC,GAAD,4BACTA,GADS,CAEZ,CAAEC,GAAIC,cAAUC,MAAOV,EAAUW,OAAQC,MAAM,QAGjDX,EAAa,MAKf,UACE,uBACEY,KAAK,OACLC,YAAY,kBACZC,MAAOf,EACPgB,SAzBN,SAAsBb,GAGpBF,EAAaE,EAAEc,OAAOF,UAyBpB,uBAAOF,KAAK,SAASE,MAAM,aAC3B,4B,gBCPSG,MA1Bf,SAAcpB,GACZ,IAAMqB,EAAWrB,EAAMsB,KAAKC,KAAI,SAACC,EAAMC,GAAP,OAC9B,qBAAYC,UAAWF,EAAKV,KAAOa,IAAOC,MAAQ,KAAlD,UACE,uDACA,8BACE,sDAAyBJ,EAAKZ,WAEhC,uBACEG,KAAK,WACLc,eAAgBL,EAAKV,KACrBI,SAAU,kBAAMlB,EAAM8B,MAAMN,EAAKd,OAEnC,uBAAOgB,UAAU,MAAMV,YAAY,gBACnC,mBACEe,QAAS,WAEP/B,EAAMgC,OAAOR,EAAKd,KAHtB,mCAXOe,MAsBX,OAAO,6BAAKJ,KC4BCY,MAxCf,WAIE,MAAwBhC,mBAAS,IAAjC,mBAAOqB,EAAP,KAAad,EAAb,KAoBA,OACE,eAAC,WAAD,WACE,sBAAKkB,UAAU,gBAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAMlB,QAASA,IAGf,cAAC,EAAD,CAAMc,KAAMA,EAAMU,OAzBT,SAACE,GAEd,IAAMC,EAASb,EAAKc,QAAO,SAACC,GAAD,OAAUA,EAAK3B,KAAOwB,KACjD1B,EAAQ2B,IAsB8BL,MApB1B,SAACQ,GAEbC,QAAQC,IAAIF,GACZ,IAAMH,EAASb,EAAKc,QAAO,SAACC,GAK1B,OAJIA,EAAK3B,KAAO4B,IAEdD,EAAKvB,MAAQuB,EAAKvB,MAEbuB,KAET7B,EAAQ2B,SAYN,qBAAKT,UAAU,OAAf,SACE,cAAC,EAAD,UC3CRe,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,sCCR1BC,EAAOC,QAAU,CAAC,MAAQ,uB","file":"static/js/main.9518078c.chunk.js","sourcesContent":["const Footer = () => {\n  let year = new Date().getFullYear();\n  return <footer>Copyrights Â®{year} </footer>;\n};\n\nexport default Footer;\n","const Header = () => {\n  return (\n    <header>\n      <h1> to do list</h1>\n      <h2>\n        {`${new Date().getDate()}.${\n          new Date().getMonth() + 1\n        }.${new Date().getFullYear()}`}\n      </h2>\n      <p>choose who you are:</p>\n      <ul></ul>\n    </header>\n  );\n};\n\nexport default Header;\n","import { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nconst List = (props) => {\n  //we initialise the state wth the empty string\n  const [userInput, setUserInput] = useState(\"\");\n  //dinoume sto state mas keno value \"\"\n  function changeHandle(e) {\n    //console.log(e.target.value);\n    //WE GOT WHAT HE WRITES\n    setUserInput(e.target.value);\n  }\n  function ftiaxetoSubmit(e) {\n    e.preventDefault();\n    //this setList is a function which is from react and will take care of updates\n    if (userInput.length) {\n      //THIS OBJECT IS OUR TODOS COMPONENTS, IF WE WANT TO ADD SOMETHING WE ADD IT HERE\n      props.setList((prevState) => [\n        ...prevState,\n        { id: uuidv4(), title: userInput.trim(), done: false },\n      ]);\n      // console.log(props.id);\n      setUserInput(\"\");\n    }\n  }\n\n  return (\n    <form onSubmit={ftiaxetoSubmit}>\n      <input\n        type=\"text\"\n        placeholder=\"write your task\"\n        value={userInput}\n        onChange={changeHandle}\n        // onChange to let him type and get what he writes\n      />\n      <input type=\"submit\" value=\"add Task\" />\n      <div></div>\n    </form>\n  );\n};\nexport default List;\n","import styles from \"./Task.module.css\";\n\nfunction Task(props) {\n  const userTask = props.list.map((toDo, i) => (\n    <li key={i} className={toDo.done ? styles.opaci : null}>\n      <div> Hey, dear (ur name)</div>\n      <div>\n        <p>your tasks are today:{toDo.title}</p>\n      </div>\n      <input\n        type=\"checkbox\"\n        defaultChecked={toDo.done}\n        onChange={() => props.check(toDo.id)}\n      />\n      <input className=\"gms\" placeholder=\"write notes\" />\n      <i\n        onClick={() => {\n          // console.log(toDo.id);\n          props.remove(toDo.id);\n        }}\n      >\n        delete ðŸ—‘\n      </i>\n    </li>\n  ));\n\n  return <ul>{userTask}</ul>;\n}\nexport default Task;\n// function Liker() {\n//   const [clicks, setClicks] = useState(0);\n//   function increment() {\n//     setClicks(clicks + 1);\n//   }\n//   function decrement() {\n//     setClicks((prevState) => prevState - 1);\n//   }\n//   return (\n//     <div>\n//       You have {clicks} tasks!\n//       <br />\n//       <button onClick={increment}>+</button>\n//       <button onClick={decrement}>-</button>\n//     </div>\n//   );\n// }\n\n//export { newTask,blabla }; //for more than one use {}\n","import React, { useState } from \"react\";\n\nimport \"./scss/Main.scss\";\nimport Footer from \"./components/tasks/Footer\";\nimport Header from \"./components/tasks/Header\";\nimport List from \"./components/tasks/List\";\nimport Task from \"./components/tasks/Task\";\n\n//we import the useState for our hook and the fragment to solve the many nested divs problem (fragm.. is a wrapper who dont affect the styles)\nimport { Fragment } from \"react\";\n\n//const names = [\"Zain\", \"Olga\", \"Nancy\"];\n// const listItems = names.map((name, i) => <li key={i}>{name}</li>);\n//its good to make the app our parent component\nfunction App() {\n  //lets initialise our hook with an empty []\n\n  //we create setList here in the app , we will take care of our updates in our List.js and we manipulate it (delete check or whatever else in Task.js)\n  const [list, setList] = useState([]);\n\n  const remove = (itemToRemove) => {\n    // itemToRemove has the id for that specific item\n    const newArr = list.filter((item) => item.id !== itemToRemove);\n    setList(newArr);\n  };\n  const check = (itemToCheck) => {\n    // itemToCheck has the id for that specific item\n    console.log(itemToCheck);\n    const newArr = list.filter((item) => {\n      if (item.id === itemToCheck) {\n        // revers done\n        item.done = !item.done;\n      }\n      return item;\n    });\n    setList(newArr);\n  };\n  // React Fragments allow you to wrap multiple elements without adding an extra node to the DOM. This can be useful when rendering multiple child elements/components in a single parent component.\n  return (\n    <Fragment>\n      <div className=\"maincontainer\">\n        <Header />\n        <List setList={setList} />\n        {/* list={list} to define the map that we create in our Task function remove and check -->look above\n         */}\n        <Task list={list} remove={remove} check={check} />\n      </div>\n      <div className=\"foot\">\n        <Footer />\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./scss/Main.scss\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"opaci\":\"Task_opaci__119Nb\"};"],"sourceRoot":""}